rule UMLS_Extraction:
    input:
        code = config['UMLS_EXTRACTION_SCRIPT'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        config['UMLS_EXTRACT_FILE']
    log:
        config['UMLS_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} {output} > {log} 2>&1" 

rule Ontologies_Extraction:
    input:
        code = config['ONTOLOGIES_EXTRACTION_SCRIPT'],
        parser = config['ONTOLOGIES_EXTRACTION_PARSER'],
        ontologies_load_inventory = config['ONTOLOGIES_LOAD_INVENTORY_FILE'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        config['ONTOLOGIES_EXTRACT_FILE']
    log:
        config['ONTOLOGIES_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} {input.parser} {input.ontologies_load_inventory} {output} > {log} 2>&1" 

rule SemMedDB_Extraction:
    input:
        code = config['SEMMEDDB_EXTRACTION_SCRIPT'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        tuplelist = config['SEMMEDDB_TUPLELIST_FILE'],
        exclusion_list = config['SEMMEDDB_EXCLUSION_FILE'],
        version_file = config['SEMMEDDB_VERSION_FILE']
    log:
        config['SEMMEDDB_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} {output.tuplelist} {output.exclusion_list} {output.version_file} > {log} 2>&1"

rule UniProtKB_Extraction:
    input:
        code = config['UNIPROTKB_EXTRACTION_SCRIPT'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        config['UNIPROTKB_DAT_FILE']
    log:
        config['UNIPROTKB_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} {output} > {log} 2>&1"

rule Ensembl_Extraction:
    input:
        code = config['ENSEMBL_EXTRACTION_SCRIPT'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        config['ENSEMBL_SOURCE_JSON_FILE']
    log:
        config['ENSEMBL_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} > {log} 2>&1"

rule UniChem_Extraction:
    input:
        code = config['UNICHEM_EXTRACTION_SCRIPT'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        config['UNICHEM_OUTPUT_TSV_FILE']
    log:
        config['UNICHEM_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} {output} > {log} 2>&1"

rule ChEMBL_Extraction:
    input:
        code = config['CHEMBL_EXTRACTION_SCRIPT'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        placeholder = config['BUILD_DIR'] + "/chembl-placeholder.empty"
    log:
        config['CHEMBL_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} " + config['CHEMBL_MYSQL_DBNAME'] +" > {log} 2>&1 && touch {output.placeholder}"

rule NCBIGene_Extraction:
    input:
        code = config['NCBIGENE_EXTRACTION_SCRIPT'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        config['NCBIGENE_TSV_FILE']
    log:
        config['NCBIGENE_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} {output} > {log} 2>&1"

rule UNII_Extraction:
    input:
        code = config['UNII_EXTRACTION_SCRIPT'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        config['UNII_TSV_FILE']
    log:
        config['UNII_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} {output} > {log} 2>&1"

rule DGIdb_Extraction:
    input:
        code = config['DGIDB_EXTRACTION_SCRIPT'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        config['DGIDB_DIR'] + "/interactions.tsv"
    log:
        config['DGIDB_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} " + config['DGIDB_DIR'] + " > {log} 2>&1"

rule DrugBank_Extraction:
    input:
        code = config['DRUGBANK_EXTRACTION_SCRIPT'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        config['DRUGBANK_INPUT_FILE']
    log:
        config['DRUGBANK_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} {output} > {log} 2>&1"

rule SMPDB_Extraction:
    input:
        code = config['SMPDB_EXTRACTION_SCRIPT'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        config['SMPDB_INPUT_FILE']
    log:
        config['SMPDB_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} " + config['SMPDB_DIR'] + " > {log} 2>&1"

rule HMDB_Extraction:
    input:
        code = config['HMDB_EXTRACTION_SCRIPT'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        config['HMDB_INPUT_FILE']
    log:
        config['HMDB_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} > {log} 2>&1"

rule GO_Annotations_Extraction:
    input:
        code = config['GO_ANNOTATIONS_EXTRACTION_SCRIPT'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        config['GO_ANNOTATIONS_INPUT_FILE']
    log:
        config['GO_ANNOTATIONS_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} {output} > {log} 2>&1"

rule Reactome_Extraction:
    input:
        code = config['REACTOME_EXTRACTION_SCRIPT'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        placeholder = config['BUILD_DIR'] + "/reactome-placeholder.empty"
    log:
        config['REACTOME_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} " + config['REACTOME_MYSQL_DBNAME'] +" > {log} 2>&1 && touch {output.placeholder}"

rule miRBase_Extraction:
    input:
        code = config['MIRBASE_EXTRACTION_SCRIPT'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        config['MIRBASE_INPUT_FILE']
    log:
        config['MIRBASE_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} {output} > {log} 2>&1"

rule JensenLab_Extraction:
    input:
        code = config['JENSENLAB_EXTRACTION_SCRIPT'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        placeholder = config['BUILD_DIR'] + "/jensenlab-placeholder.empty"
    log:
        config['JENSENLAB_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} > {log} 2>&1 && touch {output.placeholder}"

rule DrugCentral_Extraction:
    input:
        code = config['DRUGCENTRAL_EXTRACTION_SCRIPT'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        config['DRUGCENTRAL_INPUT_FILE']
    log:
        config['DRUGCENTRAL_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} {output} " + config['DRUGCENTRAL_DIR'] + " > {log} 2>&1"

rule IntAct_Extraction:
    input:
        code = config['INTACT_EXTRACTION_SCRIPT'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        config['INTACT_INPUT_FILE']
    log:
        config['INTACT_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} {output} > {log} 2>&1"

rule DisGeNET_Extraction:
    input:
        code = config['DISGENET_EXTRACTION_SCRIPT'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        config['DISGENET_INPUT_FILE']
    log:
        config['DISGENET_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} {output} > {log} 2>&1"

rule KEGG_Extraction:
    input:
        code = config['KEGG_EXTRACTION_SCRIPT'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        config['KEGG_INPUT_FILE']
    log:
        config['KEGG_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} {output} > {log} 2>&1"

rule ClinicalTrialsKG_Extraction:
    input:
        code = config['CLINICALTRIALSKG_EXTRACTION_SCRIPT'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        config['CLINICALTRIALSKG_INPUT_FILE']
    log:
        config['CLINICALTRIALSKG_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} {output} > {log} 2>&1"

rule DrugApprovalsKG_Extraction:
    input:
        code = config['DRUGAPPROVALSKG_EXTRACTION_SCRIPT'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        config['DRUGAPPROVALSKG_INPUT_FILE']
    log:
        config['DRUGAPPROVALSKG_EXTRACTION_LOG']
    shell:
        "bash -x {input.code} {output} > {log} 2>&1"
