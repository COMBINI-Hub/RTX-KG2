rule Ontologies_and_TTL:
    input:
        real = config['UMLS_CUI_FILE'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        nodes = config['ONT_OUTPUT_NODES_FILE'],
        edges = config['OUTPUT_FONT_OUTPUT_EDGES_FILEILE_FULL']
    log:
        config['BUILD_DIR'] + "/build-multi-ont-kg" + config['TEST_SUFFIX'] + ".log"
    shell:
        "bash -x " + config['CODE_DIR'] + "/build-multi-ont-kg.sh {input.real} {output.nodes} {output.edges} " + config['TEST_FLAG'] + " > {log} 2>&1" 

rule NCBIGene_Conversion:
    input:
        real = config['NCBI_GENE_TSV_FILE'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        nodes = config['NCBIGENE_OUTPUT_NODES_FILE'],
        edges = config['NCBIGENE_OUTPUT_EDGES_FILE']
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/ncbigene_tsv_to_kg_json.py " + config['TEST_ARG'] + " {input.real} {output.nodes} {output.edges}"

rule DGIdb_Conversion:
    input:
        real = config['DGIDB_DIR'] + "/interactions.tsv",
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        nodes = config['DGIDB_OUTPUT_NODES_FILE'],
        edges = config['DGIDB_OUTPUT_EDGES_FILE']
    log:
        config['DGIDB_DIR'] + "/dgidb-tsv-to-kg-json-stderr" + config['TEST_SUFFIX'] + ".log"
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/dgidb_tsv_to_kg_json.py " + config['TEST_ARG'] + " {input.real} {output.nodes} {output.edges}" + " > {log} 2>&1"

rule ChEMBL_Conversion:
    input:
        placeholder = config['BUILD_DIR'] + "/chembl-placeholder.empty",
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        nodes = config['CHEMBL_OUTPUT_NODES_FILE'],
        edges = config['CHEMBL_OUTPUT_EDGES_FILE']
    log:
        config['BUILD_DIR'] + "/chembl-mysql-to-kg-json" + config['TEST_SUFFIX'] + ".log"
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/chembl_mysql_to_kg_json.py " + config['TEST_ARG'] + " " + config['MYSQL_CONF'] + " " + config['CHEMBL_MYSQL_DBNAME'] + " {output.nodes} {output.edges} > {log} 2>&1"

rule UniChem_Conversion:
    input:
        real = config['UNICHEM_OUTPUT_TSV_FILE'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        nodes = config['UNICHEM_OUTPUT_NODES_FILE'],
        edges = config['UNICHEM_OUTPUT_EDGES_FILE']
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/unichem_tsv_to_edges_json.py " + config['TEST_ARG'] + " {input.real} {output.nodes} {output.edges}"

rule Ensembl_Conversion:
    input:
        real = config['ENSEMBL_SOURCE_JSON_FILE'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        nodes = config['ENSEMBL_OUTPUT_NODES_FILE'],
        edges = config['ENSEMBL_OUTPUT_EDGES_FILE']
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/ensembl_json_to_kg_json.py " + config['TEST_ARG'] + " {input.real} {output.nodes} {output.edges}"

rule SemMedDB_Conversion:
    input:
        real = config['SEMMED_TUPLELIST_FILE'],
        mrcui_req = config['UMLS_CUI_FILE'],
        exclusion_list = config['SEMMED_EXCLUSION_FILE'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        nodes = config['SEMMED_OUTPUT_NODES_FILE'],
        edges = config['SEMMED_OUTPUT_EDGES_FILE']
    log:
        config['BUILD_DIR'] + "/semmeddb-tuple-list-json-to-kg-json" + config['TEST_SUFFIX'] + ".log"
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/semmeddb_tuple_list_json_to_kg_json.py " + config['TEST_ARG'] + " --mrcuiFile ~/kg2-build/umls/META/MRCUI.RRF {input.real} {input.exclusion_list} {output.nodes} {output.edges} > {log} 2>&1"

rule UniProtKB_Conversion:
    input:
        real = config['UNIPROTKB_DAT_FILE'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        nodes = config['UNIPROTKB_OUTPUT_NODES_FILE'],
        edges = config['UNIPROTKB_OUTPUT_EDGES_FILE']
    log:
        config['BUILD_DIR'] + "/uniprotkb-dat-to-json" + config['TEST_SUFFIX'] + ".log"
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/uniprotkb_dat_to_json.py " + config['TEST_ARG'] + " {input.real} {output.nodes} {output.edges} > {log} 2>&1"

rule RepoDB_Conversion:
    input:
        real = config['REPODB_INPUT_FILE'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        nodes = config['REPODB_OUTPUT_NODES_FILE'],
        edges = config['REPODB_OUTPUT_EDGES_FILE']
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/repodb_csv_to_kg_json.py " + config['TEST_ARG'] + " {input.real} {output.nodes} {output.edges}"

rule SMPDB_Conversion:
    input:
        real = config['SMPDB_INPUT_FILE'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        nodes = config['SMPDB_OUTPUT_NODES_FILE'],
        edges = config['SMPDB_OUTPUT_EDGES_FILE']
    log:
        config['SMPDB_DIR'] + "/smpdb-csv-to-kg-json" + config['TEST_SUFFIX'] + ".log"
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/smpdb_csv_to_kg_json.py " + config['TEST_ARG'] + " " + config['SMPDB_DIR'] + " {output.nodes} {output.edges} > {log} 2>&1"

rule DrugBank_Conversion:
    input:
        real = config['DRUGBANK_INPUT_FILE'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        nodes = config['DRUGBANK_OUTPUT_NODES_FILE'],
        edges = config['DRUGBANK_OUTPUT_EDGES_FILE']
    log:
        config['BUILD_DIR'] + "/drugbank-xml-to-kg-json" + config['TEST_SUFFIX'] + ".log"
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/drugbank_xml_to_kg_json.py " + config['TEST_ARG'] + " {input.real} {output.nodes} {output.edges} > {log} 2>&1"

rule HMDB_Conversion:
    input:
        real = config['HMDB_INPUT_FILE'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        nodes = config['HMDB_OUTPUT_NODES_FILE'],
        edges = config['HMDB_OUTPUT_EDGES_FILE']
    log:
        config['BUILD_DIR'] + "/hmdb-xml-to-kg-json" + config['TEST_SUFFIX'] + ".log"
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/hmdb_xml_to_kg_json.py " + config['TEST_ARG'] + " {input.real} {output.nodes} {output.edges} > {log} 2>&1"

rule GO_Annotations_Conversion:
    input:
        real = config['GO_ANNOTATIONS_INPUT_FILE'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        nodes = config['GO_ANNOTATIONS_OUTPUT_NODES_FILE'],
        edges = config['GO_ANNOTATIONS_INPUT_NODES_FILE']
    log:
        config['BUILD_DIR'] + "/go-gpa-to-kg-json" + config['TEST_SUFFIX'] + ".log"
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/go_gpa_to_kg_json.py " + config['TEST_ARG'] + " {input.real} {output.nodes} {output.edges} > {log} 2>&1"

rule Reactome_Conversion:
    input:
        placeholder = config['BUILD_DIR'] + "/reactome-placeholder.empty",
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        nodes = config['REACTOME_OUTPUT_NODES_FILE'],
        edges = config['REACTOME_OUTPUT_EDGES_FILE']
    log:
        config['BUILD_DIR'] + "/reactome-mysql-to-kg-json" + config['TEST_SUFFIX'] + ".log"
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/reactome_mysql_to_kg_json.py " + config['TEST_ARG'] + " " + config['MYSQL_CONF'] + " " + config['REACTOME_MYSQL_DBNAME'] + " {output.nodes} {output.edges} > {log} 2>&1"

rule miRBase_Conversion:
    input:
        real = config['MIRBASE_INPUT_FILE'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        nodes = config['MIRBASE_OUTPUT_NODES_FILE'],
        edges = config['MIRBASE_OUTPUT_EDGES_FILE']
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/mirbase_dat_to_kg_json.py " + config['TEST_ARG'] + " {input.real} {output.nodes} {output.edges}"

rule Jensenlab_Conversion:
    input:
        validation = config['VALIDATION_PLACEHOLDER'],
        placeholder = config['BUILD_DIR'] + "/jensenlab-placeholder.empty"
    output:
        nodes = config['JENSENLAB_OUTPUT_NODES_FILE'],
        edges = config['JENSENLAB_OUTPUT_EDGES_FILE']
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/jensenlab_tsv_to_kg_json.py " + config['TEST_ARG'] + " " + config['JENSENLAB_DIR'] + " {output.nodes} {output.edges}"

rule DrugCentral_Conversion:
    input:
        real = config['DRUGCENTRAL_INPUT_FILE'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        nodes = config['DRUGCENTRAL_OUTPUT_NODES_FILE'],
        edges = config['DRUGCENTRAL_OUTPUT_EDGES_FILE']
    log:
        config['BUILD_DIR'] + "/drugcentral/drugcentral-mysql-to-kg-json" + config['TEST_SUFFIX'] + ".log"
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/drugcentral_json_to_kg_json.py " + config['TEST_ARG'] + " {input.real} {output.nodes} {output.edges} > {log} 2>&1"

rule IntAct_Conversion:
    input:
        real = config['INTACT_INPUT_FILE'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        nodes = config['INTACT_OUTPUT_NODES_FILE'],
        edges = config['INTACT_OUTPUT_EDGES_FILE']
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/intact_tsv_to_kg_json.py " + config['TEST_ARG'] + " {input.real} {output}"

rule DisGeNET_Conversion:
    input:
        real = config['DISGENET_INPUT_FILE'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        nodes = config['DISGENET_OUTPUT_NODES_FILE'],
        edges = config['DISGENET_OUTPUT_EDGES_FILE']
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/disgenet_tsv_to_kg_json.py " + config['TEST_ARG'] + " {input.real} {output.nodes} {output.edges}"

rule KEGG_Conversion:
    input:
        real = config['KEGG_INPUT_FILE'],
        validation = config['VALIDATION_PLACEHOLDER']
    output:
        nodes = config['KEGG_OUTPUT_NODES_FILE'],
        edges = config['KEGG_OUTPUT_EDGES_FILE']
    log:
        config['BUILD_DIR'] + "/kegg_json_to_kg_json" + config['TEST_SUFFIX'] + ".log"
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/kegg_json_to_kg_json.py " + config['TEST_ARG'] + " {input.real} {output.nodes} {output.edges} > {log} 2>&1"
