rule Merge:
    input:
        ont = config['OUTPUT_FILE_FULL'],
        uniprot = config['UNIPROTKB_OUTPUT_FILE'],
        semmeddb = config['SEMMED_OUTPUT_FILE'],
        chembl = config['CHEMBL_OUTPUT_FILE'],
        ensembl = config['ENSEMBL_OUTPUT_FILE'],
        unichem = config['UNICHEM_OUTPUT_FILE'],
        ncbigene = config['NCBI_GENE_OUTPUT_FILE'],
        dgidb = config['DGIDB_OUTPUT_FILE'],
        repodb = config['REPODB_OUTPUT_FILE'],
        drugbank = config['DRUGBANK_OUTPUT_FILE'],
        smpdb = config['SMPDB_OUTPUT_FILE'],
        hmdb = config['HMDB_OUTPUT_FILE'],
        go_annotations = config['GO_ANNOTATION_OUTPUT_FILE'],
        reactome = config['REACTOME_OUTPUT_FILE'],
        mirbase = config['MIRBASE_OUTPUT_FILE'],
        jensenlab = config['JENSENLAB_OUTPUT_FILE'],
        drugcentral = config['DRUGCENTRAL_OUTPUT_FILE'],
        intact = config['INTACT_OUTPUT_FILE'],
        disgenet = config['DISGENET_OUTPUT_FILE'],
        kegg = config['KEGG_OUTPUT_FILE']
    output:
        full = config['FINAL_OUTPUT_FILE_FULL'],
        orph = config['OUTPUT_FILE_ORPHAN_EDGES']
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/merge_graphs.py " + config['TEST_ARG'] + \
            " --kgFileOrphanEdges {output.orph}" + \
            " --outputFile {output.full} " + \
            "{input.ont} " + \
            "{input.semmeddb} " + \
            "{input.uniprot} " + \
            "{input.ensembl} " + \
            "{input.unichem} " + \
            "{input.chembl} " + \
            "{input.ncbigene} " + \
            "{input.dgidb} " + \
            "{input.repodb} " + \
            "{input.smpdb} " + \
            "{input.drugbank} " + \
            "{input.hmdb} " + \
            "{input.go_annotations} " + \
            "{input.reactome} " + \
            "{input.mirbase} " + \
            "{input.jensenlab} " + \
            "{input.drugcentral} " + \
            "{input.intact} " + \
            "{input.disgenet} " + \
            "{input.kegg}"

rule Stats:
    input:
        config['FINAL_OUTPUT_FILE_FULL']
    output:
        config['REPORT_FILE_FULL']
    log: 
        config['BUILD_DIR'] + "/report_stats_on_json_kg" + config['TEST_SUFFIX'] + ".log"
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/report_stats_on_json_kg.py {input} {output}"

rule Simplify:
    input:
        real = config['FINAL_OUTPUT_FILE_FULL'],
        placeholder = config['REPORT_FILE_FULL']
    output:
        config['SIMPLIFIED_OUTPUT_FILE_FULL']
    log:
        config['BUILD_DIR'] + "/filter_kg_and_remap_predicates" + config['TEST_SUFFIX'] + ".log"
    shell:
        "bash -x " + config['CODE_DIR'] + "/run-simplify.sh {input.real} {output} " + config['VERSION_FILE'] + " " + config['TEST_FLAG'] + " > {log} 2>&1" 

rule Slim:
    input:
        slim_real = config['SIMPLIFIED_OUTPUT_FILE_FULL'],
        placeholder = config['SIMPLIFIED_OUTPUT_NODES_FILE_FULL']
    output:
        config['SLIM_OUTPUT_FILE_FULL']
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/slim_kg2.py " + config['TEST_ARG'] + " {input.slim_real} {output}"

rule Simplify_Stats:
    input:
        real = config['SIMPLIFIED_OUTPUT_FILE_FULL'],
        placeholder = config['SLIM_OUTPUT_FILE_FULL']
    output:
        config['SIMPLIFIED_REPORT_FILE_FULL']
    shell:
        config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/report_stats_on_json_kg.py --useSimplifiedPredicates {input.real} {output}"

rule TSV:
    input:
        real = config['SIMPLIFIED_OUTPUT_FILE_FULL'],
        placeholder = config['SIMPLIFIED_REPORT_FILE_FULL']
    output:
        placeholder = config['BUILD_DIR'] + "/tsv_placeholder.empty"
    run:
        shell("rm -rf " + config['KG2_TSV_DIR'])
        shell("mkdir -p " + config['KG2_TSV_DIR'])
        shell(config['VENV_DIR'] + "/bin/python3 -u " + config['CODE_DIR'] + "/kg_json_to_tsv.py {input.real} " + config['KG2_TSV_DIR'])
        shell("touch {output.placeholder}")
